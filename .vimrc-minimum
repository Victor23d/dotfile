" GVim
" Doesn't work, don't know why
" let g:Guifont="DejaVu Sans Mono for Powerline:h16"
" let g:guifont='Consolas:h16:b:cDEFAULT'
" GuiFont Consolas:h12
"
" GVim original setting works
" set guifont=Consolas:h16:b:cDEFAULT
set guifont=Iosevka:h16:b:cDEFAULT
set guifont=Iosevka:h16:cDEFAULT
" start nvim from powershell to debug
" do NOT use nvim qt to edit init.vim, it's a bug on windows

call plug#begin('~/.vim/plugged')

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" Plug 'scrooloose/nerdtree'
" Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
" Plug 'junegunn/fzf.vim'

" Start cow
Plug 'mhinz/vim-startify'


" common utils
" git
Plug 'tpope/vim-fugitive'

" Defaults everyone can agree on
" Plug 'tpope/vim-sensible'

" change such surroundings in pairs
Plug 'tpope/vim-surround'

" gcc to comment out
Plug 'tpope/vim-commentary'

" Plug 'tomtom/tcomment_vim'

" alias []
Plug 'tpope/vim-unimpaired'

"sugar shell commands
Plug 'tpope/vim-eunuch'

" . repeat plug
Plug 'tpope/vim-repeat'

" enhances netrw
Plug 'tpope/vim-vinegar'

" automatically adjusts 'shiftwidth' and 'expandtab'
Plug 'tpope/vim-sleuth'

" automatic closing pairs
Plug 'Raimondi/delimitMate'

" s motion
Plug 'justinmk/vim-sneak'

" Directory viewer :dir
" Plug 'justinmk/vim-dirvish'

" go to file/term gof got
Plug 'justinmk/vim-gtfo'

" Wrapper of some :terminal functions.
Plug 'kassio/neoterm'

" git sign column
Plug 'airblade/vim-gitgutter'

Plug 'AndrewRadev/linediff.vim'
Plug 'chrisbra/vim-diff-enhanced'


" Plug 'SirVer/ultisnips'


" colors
Plug 'rafi/awesome-vim-colorschemes'
Plug 'flazz/vim-colorschemes'
Plug 'challenger-deep-theme/vim', { 'as': 'challenger-deep' }
Plug 'fenetikm/falcon'
Plug 'liuchengxu/space-vim-dark'
Plug 'jacoborus/tender.vim'
Plug 'mhartington/oceanic-next'
" Plug 'rainglow/vim'


" Align center
Plug 'junegunn/goyo.vim'

" work with goyo
Plug 'junegunn/limelight.vim'


" expend + _
Plug 'terryma/vim-expand-region'

" visual <C-n>
Plug 'terryma/vim-multiple-cursors'

" leader leader motion
Plug 'easymotion/vim-easymotion'

" Icon
" Plug 'ryanoasis/vim-devicons'

" format

" Useful
Plug 'michaeljsmith/vim-indent-object'

" au BufWrite * :Autoformat makes use of external formatting programs
Plug 'Chiel92/vim-autoformat'

" Missing Github https://github.com/elzr/vim-jsjon
Plug 'elzr/vim-json'




call plug#end()


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Differences between Nvim and Vim                 *vim-differences*<Paste>
syntax on
syntax enable
filetype plugin indent on
set autoindent
set autoread
set backspace=2 " 2 same as ":set backspace=indent,eol,start"
"set backupdir=.,$XDG_DATA_HOME/nvim/backup
set belloff=all
set complete=.,w,b,u,t
set cscopeverbose
"set directory=$XDG_DATA_HOME/nvim/swap//
if has('nvim')
    set display=lastline,msgsep
endif
set encoding=utf-8
set fileencoding=utf-8
set fillchars=""
" set fsync off
set nofsync
set formatoptions=tcqj
set history=10000
set hlsearch
set incsearch

set nolangremap
set laststatus=2
set listchars=tab:>-,trail:-
set nocompatible
set nrformats=bin,hex
set ruler
set sessionoptions=blank,buffers,curdir,folds,help,tabpages,winsize
set shortmess=filnxtToOF
set showcmd
set sidescroll=1
set smarttab
set tabpagemax=50
set tags=./tags;,tags
set ttimeoutlen=50
set ttyfast
"set undodir=~/.local/share/nvim/undo
set wildmenu



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" nvim option


" for vim 8
if (has("termguicolors"))
    set termguicolors
endif

if has('nvim')
    set termguicolors
    set shada=!,'100,<50,s10,h
endif



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" config

" will cause highlight Search and CursorLineNr color invaild
" set background=dark

" set autowrite
set fileencoding=utf-8
set termencoding=utf-8
set ff=unix


set ignorecase
set smartcase
set magic               " Use magic patterns (extended regular expression) default on
set guioptions=         " remove scrollbars on macvim
set noshowmode          " don't show mode as airline already does
set foldmethod=manual   " set folds by syntax of current language
" can resize windows but can not copy
" set mouse=a
set iskeyword+=-        " treat dash separated words as a word text object


" show existing tab with 4 spaces width
set tabstop=4
" when indenting with '>', use 4 spaces width
set shiftwidth=4
" On pressing tab, insert 4 spaces
set expandtab
set shiftround          " Round indent to multiple of shiftwidth
set hidden              " enable hidden unsaved buffers

set visualbell

set textwidth=0
" set textwidth=999
set wrap                " default on
" set list

set number
set relativenumber
set numberwidth=4

set splitbelow
set splitright

set inccommand=split


" set spell spelllang=en_us
set nospell
" [s ]s z= zg



" will cause paste improper indent
" set nopaste

" will cause <C-e> <C-a> don't work
" set paste

" jump to the last position when reopening a file
if has("autocmd")
    au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
                \| exe "normal! g'\"" | endif
endif



" colorscheme darkblue
" colorscheme elflord
" colorscheme koehler
" colorscheme murphy
" colorscheme py
" colorscheme lucariox
" colorscheme solarized
" colorscheme gruvbox
" colorscheme desert256
" colorscheme janah-v
" colorscheme one       " atom
colorscheme OceanicNext


if &diff
    colorscheme janah-v
endif
au FilterWritePre * if &diff | colorscheme janah-v | endif



let g:oceanic_next_terminal_bold = 1
let g:oceanic_next_terminal_italic = 1
let g:airline_theme='oceanicnext'


highlight Normal guifg=#dadada ctermfg=253 guibg=#000000 gui=NONE cterm=NONE
" highlight Comment guifg=#585858 ctermfg=240 guibg=NONE ctermbg=NONE gui=NONE cterm=NONE
" highlight Comment guifg=#666666 ctermfg=240 guibg=NONE ctermbg=NONE gui=NONE cterm=NONE

" set background=dark

" doesn't work
highlight LineNr ctermfg=grey
highlight Search cterm=NONE ctermfg=grey ctermbg=blue

highlight LineNr term=bold cterm=NONE ctermfg=DarkGrey ctermbg=NONE gui=NONE guifg=DarkGrey guibg=NONE
highlight Search guibg=peru guifg=wheat
highlight Search guibg=lightblue guifg=black
highlight CursorLineNr guifg=#FF00FF

"Denite select line color
highlight CursorLine guifg=#000000
" highlight CursorLine guibg=#00aaff
" highlight CursorLine guibg=#ee9900
highlight CursorLine guibg=#dd7777




""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" leader maps
let mapleader = "\<Space>"

" Readline key bindings
nnoremap <A-1> 1gt
nnoremap <A-2> 2gt
nnoremap <A-3> 3gt
nnoremap <A-4> 4gt
nnoremap <A-5> 5gt
nnoremap <A-6> 6gt
nnoremap <A-7> 7gt
nnoremap <A-8> 8gt
nnoremap <A-9> 9gt

nnoremap <F2> :%s/\<<C-r><C-w>\>//gc<Left><Left><Left>
vnoremap <F2> y :%s/<C-r>"//gc<Left><Left><Left>


" Switch to last-active tab
if !exists('g:lasttab')
    let g:lasttab = 1
endif
nmap <Leader><tab> :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()

" set pastetoggle=<Leader>p


" Move
inoremap <C-a> <C-o>^
inoremap <C-e> <End>
inoremap <M-b> <C-o>b
inoremap <M-f> <C-o>w

inoremap <C-u> <Esc>d0s
" inoremap <C-k> <Esc>C


" <S-CR> works in mintty but not in iTerm2
inoremap <S-CR> <Esc>o
inoremap <C-CR> <Esc>o

" {
" a data file
" inoremap <S-CR> <Esc>o

" inoremap <C-j> <Esc>o

" cnoremap <S-Insert> <C-R>+
" inoremap <S-Insert> <C-R>+
" }

noremap <M-Up> <Esc>dd<Up>P
inoremap <M-Up> <Esc>dd<Up>P
noremap <M-Down> <Esc>ddp
inoremap <M-Down> <Esc>ddp

noremap <M-S-Up> <Esc>dd<Up>P
inoremap <M-S-Up> <Esc>dd<Up>P
noremap <M-S-Down> <Esc>ddp
inoremap <M-S-Down> <Esc>ddp

" inoremap dd <Esc>dd

" <C-/>
" can not use noremap
imap <C-_> <Esc>mtgcc`tja
nmap <C-_> <Esc>mtgcc`tj
vmap <C-_> mtgc`tj

" Use set magic instead
" nnoremap / /\v
map <silent> <esc> :nohlsearch<cr>

tnoremap <Esc> <C-\><C-n>
nnoremap <silent> <leader>` :botright Ttoggle<CR><C-w>j
nnoremap <silent> <leader>v` :vertical botright Ttoggle<CR><C-w>l
tnoremap <silent> <leader>` <C-\><C-n> :Ttoggle<CR>


" CWD = Change to Directory of Current file
command CWD cd %:p:h
command PWD cd %:p:h

command Marks Denite mark
command Files Denite file
command Buffers Denite buffer
command Reg Denite register

command M Marks
command F Files
command B Buffers
command R Reg
command G Grep



nnoremap <leader>e :NERDTreeToggle<CR>
nnoremap <leader>d :Denite
nnoremap <leader>F :Denite grep<CR>
nnoremap <leader>m :Denite mark<CR>


nnoremap <silent> <leader>tn :set invrelativenumber<CR>:set invnumber<CR>
nnoremap <silent> <Leader>tg :GitGutterSignsToggle<CR>
nnoremap <silent> <Leader>tl :ALEToggle<CR>
nnoremap <silent> <Leader>ta :set invrelativenumber<CR>:set invnumber<CR>:GitGutterSignsToggle<CR>:ALEToggle<CR>
nnoremap <silent><expr> <Leader>th (&hls && v:hlsearch ? ':nohls' : ':set hls')."\n"

" nnoremap <C-p> :History<CR>



" set backspace=2

" http://vim.wikia.com/wiki/256_colors_in_vim
" set t_Co=256



autocmd BufWrite * set ff=unix
" au BufWrite * :Autoformat



" --------------------------------------------------------------------------------
"  Plugin config

" python mode
let g:pymode_python = 'python3'


if exists('g:plugs["vim-airline"]')
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#formatter = 'unique_tail'
    let g:airline_powerline_fonts = 1
    "
    " let g:airline_theme='badcat' " doesn't work
    let g:airline_theme='deus'

    " set runtimepath^=~/.vim/pack/foo/start/ctrlp.vim
    let g:ctrlp_cmd = 'CtrlPMRU'
endif


if exists('g:plugs["nerdtree"]')
    " open a NERDTree automatically when vim starts up
    " autocmd vimenter * NERDTree

    " open NERDTree automatically when vim starts up on opening a directory?
    autocmd StdinReadPre * let s:std_in=1
    autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif

    " close vim if the only window left open is a NERDTree
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

    let NERDTreeMinimalUI = 1
    let NERDTreeDirArrows = 1

    " resolve :E conflict
    command E Ex

    " UTF-8 Unicode text
    let g:NERDTreeDirArrowExpandable = '▸'
    let g:NERDTreeDirArrowCollapsible = '▾'

    " let g:NERDTreeDirArrowExpandable = '+'
    " let g:NERDTreeDirArrowCollapsible = '-'
endif


if exists('g:plugs["fzf.vim"]')
    let g:fzf_action = {
                \ 'enter': 'tab split',
                \ 'ctrl-t': 'tab split',
                \ 'ctrl-x': 'split',
                \ 'ctrl-v': 'vsplit' }

    " [Buffers] Jump to the existing window if possible
    let g:fzf_buffers_jump = 1

    " [[B]Commits] Customize the options used by 'git log':
    let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'

    " [Tags] Command to generate tags file
    let g:fzf_tags_command = 'ctags -R'

    " [Commands] --expect expression for directly executing the command
    let g:fzf_commands_expect = 'alt-enter,ctrl-x'

    " Mapping selecting mappings
    " nmap <leader><tab> <plug>(fzf-maps-n)
    " xmap <leader><tab> <plug>(fzf-maps-x)
    " omap <leader><tab> <plug>(fzf-maps-o)

    " Insert mode completion
    imap <c-x><c-k> <plug>(fzf-complete-word)
    imap <c-x><c-f> <plug>(fzf-complete-path)
    imap <c-x><c-j> <plug>(fzf-complete-file-ag)
    imap <c-x><c-l> <plug>(fzf-complete-line)

    " Advanced customization using autoload functions
    inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})
endif





".ideavim
" map <F2> :action RenameElement<CR>


" let g:python3_host_prog = 'PATH/python3/python3.exe'
